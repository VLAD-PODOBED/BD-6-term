CREATE TABLE TRANSPORTATION_COST
(
    ID         INT GENERATED ALWAYS AS IDENTITY (START WITH 1 NOCACHE),
    MONTH      INT NOT NULL,
    YEAR       INT NOT NULL,
    COST       FLOAT NOT NULL,

    CONSTRAINT PK_TRANSPORTATION_COST_ID PRIMARY KEY (ID)
);

CREATE TABLE CLIENT_TRANSPORTATION
(
    CLIENT_ID           INT NOT NULL,
    TRANSPORTATION_ID   INT NOT NULL,

    CONSTRAINT FK_CLIENT_TRANSPORTATION_CLIENT_ID FOREIGN KEY (CLIENT_ID)
        REFERENCES CLIENT (ID) ON DELETE CASCADE,
    CONSTRAINT FK_CLIENT_TRANSPORTATION_TRANSPORTATION_ID FOREIGN KEY (TRANSPORTATION_ID)
        REFERENCES TRANSPORTATION_COST (ID) ON DELETE CASCADE
);

INSERT INTO TRANSPORTATION_COST (MONTH, YEAR, COST) VALUES (1, 2022, 100.00);
INSERT INTO TRANSPORTATION_COST (MONTH, YEAR, COST) VALUES (2, 2022, 110.00);
INSERT INTO TRANSPORTATION_COST (MONTH, YEAR, COST) VALUES (3, 2023, 50.00);
INSERT INTO TRANSPORTATION_COST (MONTH, YEAR, COST) VALUES (4, 2022, 340.00);
INSERT INTO TRANSPORTATION_COST (MONTH, YEAR, COST) VALUES (5, 2022, 10.00);
INSERT INTO TRANSPORTATION_COST (MONTH, YEAR, COST) VALUES (6, 2022, 80.00);

INSERT INTO CLIENT_TRANSPORTATION (CLIENT_ID, TRANSPORTATION_ID) VALUES (1, 1);
INSERT INTO CLIENT_TRANSPORTATION (CLIENT_ID, TRANSPORTATION_ID) VALUES (2, 2);
INSERT INTO CLIENT_TRANSPORTATION (CLIENT_ID, TRANSPORTATION_ID) VALUES (3, 2);
INSERT INTO CLIENT_TRANSPORTATION (CLIENT_ID, TRANSPORTATION_ID) VALUES (3, 4);
INSERT INTO CLIENT_TRANSPORTATION (CLIENT_ID, TRANSPORTATION_ID) VALUES (2, 5);
INSERT INTO CLIENT_TRANSPORTATION (CLIENT_ID, TRANSPORTATION_ID) VALUES (1, 6);

select * from TRANSPORTATION_COST;
select * from CLIENT_TRANSPORTATION;
select *from "ORDER";
--стоимости перевозок для каждого клиента на следующий год, учитывая рост стоимости затрат на 10% бензин по сравнению с аналогичным месяцем прошлого года.
SELECT CLIENT_ID,
       TOTAL_COST_NEXT_YEAR
FROM (
  SELECT CLIENT_ID,
         TOTAL_COST_NEXT_YEAR,
         ROW_NUMBER() OVER (PARTITION BY CLIENT_ID ORDER BY TOTAL_COST_NEXT_YEAR DESC) AS RANK
  FROM (
    SELECT CLIENT_ID,
           SUM(COST * 1.1) AS TOTAL_COST_NEXT_YEAR
    FROM "ORDER"
    WHERE EXTRACT(YEAR FROM DATETIME) = EXTRACT(YEAR FROM SYSDATE) - 1
    GROUP BY CLIENT_ID
  )
)
WHERE RANK = 1;


--Рост, падение, рост предоставления для каждого вида услуг
SELECT START_TIME AS FIRST_RISE_DATE,
        END_TIME AS FALL_DATE, 
        START_COST AS FIRST_RISE_COST, 
    AVG_COST AS SECOND_COST, 
    END_COST AS SECOND_RISE_COST
FROM "ORDER"
MATCH_RECOGNIZE (
    PARTITION BY CLIENT_ID
    ORDER BY DATETIME
    MEASURES
         FIRST(DATETIME) AS START_TIME,
        LAST(DATETIME) AS END_TIME,
        FIRST(COST) AS START_COST,
        LAST(COST) AS END_COST,
        AVG(COST) AS AVG_COST
    PATTERN (UP DOWN UP)
    DEFINE
        UP AS COST > PREV(COST),
        DOWN AS COST < PREV(COST)
)
